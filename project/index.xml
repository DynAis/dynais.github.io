<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Project</title>
    <link>https://dynais.github.io/project/</link>
    <description>Recent content on Project</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyrights © 2022 DynAis. All Rights Reserved.</copyright>
    <lastBuildDate>Thu, 20 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://dynais.github.io/project/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DuinoAccess</title>
      <link>https://dynais.github.io/project/posts/project.da.duinoaccess/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dynais.github.io/project/posts/project.da.duinoaccess/</guid>
      <description>这次也是因为闲的在家没有事情做，所以又给自己开了一个新坑，其实蛮早以前就有过想做一个电脑上能用的指纹锁的想法了，但是一直没有动手，刚好这次有机会，并且也是刚刚新组了一台电脑，就想着要把这个项目给做了。
这个项目的一个主要的灵感来源是@稚晖君很早以前发在Arduino论坛上的一个项目 (Link: 如何制作一个带指纹识别的机械键盘), 这次项目的的主要思路都和他的差不多，只不过我想做成独立的一个模块，并且最好能够实现便携功能，也就是说如果可以的话我想加上蓝牙的功能
然后这次的文章大概也会写好几部分，具体取决于我最后能不能最后好好完成这个项目&amp;hellip;
这是一个开源项目，后续也会一直更新进度，对你有帮助的话可以给我个星星，传送门：https://github.com/DynAis/duino-access
0x00 - 前言  这次也是因为闲的在家没有事情做，所以又给自己开了一个新坑，其实蛮早以前就有过想做一个电脑上能用的指纹锁的想法了，但是一直没有动手，刚好这次有机会，并且也是刚刚新组了一台电脑，就想着要把这个项目给做了。
这个项目的一个主要的灵感来源是@稚晖君很早以前发在Arduino论坛上的一个项目 (Link: 如何制作一个带指纹识别的机械键盘), 这次项目的的主要思路都和他的差不多，只不过我想做成独立的一个模块，并且最好能够实现便携功能，也就是说如果可以的话我想加上蓝牙的功能
然后这次的文章大概也会写好几部分，具体取决于我最后能不能最后好好完成这个项目&amp;hellip;
这是一个开源项目，后续也会一直更新进度，对你有帮助的话可以给我个星星，传送门：https://github.com/DynAis/duino-access
   0x01 - 核心部分元器件选型 这次的目标是能够使用指纹解锁的方式让电脑自动解锁，思路是使用指纹模块给出信号+单片机模拟键盘输入的简单思路，由于整体的体积要求越小越好，所以元件的选型基本没有选择
   使用模块 价格     arduino-pro-micro (VCC 5v or 3.3v) 19.80 CNY   HN0610 指纹模块 45.00 CNY   AMS1117-3.3v/5v 降压模块 (假如使用5v的arduino，3.3v的不需要) 1.29 CNY   蜂鸣器、导线若干 -    之所以没有用稚晖的那个FPM3X指纹模块的原因是因为那个好像在TB上已经快找不到了，只剩下最后一家而且卖的很贵，所以当时就选择了这个卖得最好的来做(有几天自闭的时候非常后悔这个选择)，并且从外观上来说我更喜欢这款一点
   0x02 - 环境选择与搭建 VSCode + PlatformIO 整个环境方面没有使用传统的 ArduinoIDE 来做，而是选择的使用 VSCode 来完成这次的项目，主要原因是为了以后做其他单片机项目的时候也都统一到 VSCode上去，这样整个一致性会比较好</description>
    </item>
    
    <item>
      <title>[T-CLK] 番茄钟重构</title>
      <link>https://dynais.github.io/project/posts/project.tclk.%E7%95%AA%E8%8C%84%E9%92%9F%E9%87%8D%E6%9E%84/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dynais.github.io/project/posts/project.tclk.%E7%95%AA%E8%8C%84%E9%92%9F%E9%87%8D%E6%9E%84/</guid>
      <description>项目进度   重构了代码
  修正了大部分bug
  一. 重要代码模块 1. Qtimer  https://blog.csdn.net/jia666666/article/details/81672344
 Qtimer是Qt自带的定时器类, 位于PyQt5.Qcore下, 和单片机的中断函数非常像, 并且提供单次触发和多次触发两种触发方式
多次触发 timer.timeout.connect(function) ... timer = Qtimer() timer.start(1000) 这里timeout是Qtimer的中断信号, 这里设定timer.start(1000)代表每一秒执行一次中断, 在番茄钟里, 我使用这个中断来进行时间的更新, 时间的更新仍然使用的是原生的time模块
如果要停止Qtimer,使用
timer.stop() 2. 自定义信号  https://blog.csdn.net/foreveronly/article/details/82453697
 二. 已解决的问题 1. 拖动窗口时时间不走动的问题 加完Qtimer中断完全没有问题
3. 进程无法完全退出问题 -&amp;gt; window.close()效果问题 -&amp;gt; 响铃bug 通过将子窗口变为主窗口类的成员, 并使用以下语句初始化
class MainWindow(QMainWindow): def __init__(self): super().__init__() #子窗口建立 self.subBreak = BreakWindow(self)# 注意这里 class BreakWindow(QDialog): def __init__(self,parent=None): super().__init__(parent) 关键也就是加入def __init__(self,parent=None), 使主从窗口关联起来(具体实现逻辑尚不清晰), 再加上合理的退出判断, 就可以实现干净的退出了</description>
    </item>
    
    <item>
      <title>[T-CLK] 番茄钟基本功能建设</title>
      <link>https://dynais.github.io/project/posts/project.tclk.%E7%95%AA%E8%8C%84%E9%92%9F%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD%E5%BB%BA%E8%AE%BE/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dynais.github.io/project/posts/project.tclk.%E7%95%AA%E8%8C%84%E9%92%9F%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD%E5%BB%BA%E8%AE%BE/</guid>
      <description>项目进度  加入了自己指定时间的模块   加入保存用户设置的文件config.json 在倒计时结束时发出铃声通知 完善了除统计和To Do List外的Menu界面   修正了部分bug  一. 重要代码模块 1. 打包程序成exe文件 pyInstaller模块 pyInstaller是python的一个库, 使用它可以很方便的打包文件成为exe可执行文件
要使用这个库, 首先在Pycharm里安装相应的环境, 之后新建一个.py文件, 比如我的:
在里面输入代码(以这次工程为例):
import os if __name__ == &amp;#39;__main__&amp;#39;: from PyInstaller.__main__ import run opts=[&amp;#39;main.py&amp;#39;,&amp;#39;-w&amp;#39;,&amp;#39;-F&amp;#39;,&amp;#39;--icon=image/tomato.ico&amp;#39;] run(opts) 其中主要注意opts=[&#39;main.py&#39;,&#39;-w&#39;,&#39;-F&#39;,&#39;--icon=image/tomato.ico&#39;]这一句
main.py是主文件, 是进程的入口
-w这个参数使编译出来的文件时exe+文件的形式, 去掉这个参数编译出来是一个整体的exe文件
-F参数强制编译, 也就是说本次会覆盖上次的文件, 我觉得加上比较好
最后--icon=image/tomato.ico是我指定的exe文件图标, 需要是一个ico文件
直接运行.py脚本就可以在/dist里得到编译的文件
资源文件夹问题 本次制作番茄钟使用到的资源文件, 比如配置文件, 或者是.MP3的铃声文件, pyInstaller在编译的时候都是不会编译的, 也就是说需要自己将文件复制到产生出来的目录下, 不然程序会报错无法运行
2. 读取和写入配置文件 使用Json作为配置文件 Json是一种常见的语言, 其中一种用法就是作为书写配置文件的语言, 虽然有人说它不适合作为配置文件语言, 但是小项目用用还是没有问题的
Json配置文件以{开头, 以}结束, 大括号在Json里代表一个对象, 具有一个键与一个值, 用:对应,
可以理解为Python里的字典(其实就是)
用Python的语法来看Json没有一点问题</description>
    </item>
    
    <item>
      <title>[T-CLK] 番茄钟倒计时模块的基本实现</title>
      <link>https://dynais.github.io/project/posts/project.tclk.%E7%95%AA%E8%8C%84%E9%92%9F%E5%80%92%E8%AE%A1%E6%97%B6%E6%A8%A1%E5%9D%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dynais.github.io/project/posts/project.tclk.%E7%95%AA%E8%8C%84%E9%92%9F%E5%80%92%E8%AE%A1%E6%97%B6%E6%A8%A1%E5%9D%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0/</guid>
      <description>项目进度  实现了番茄钟最基本的倒计时功能 实现了按钮交互的功能  一. 重要代码模块 1. 显示时间与计算时间的转换 实现倒计时时的一个问题是: 显示的时间格式需要是&amp;quot;XX:XX&amp;quot;, 但是为了方便计算, 需要把这个格式的时间转化为秒数的形式, 这就需要一个显示时间与计算时间互相转换的模块
# 显示时间转秒数 &amp;#34;XX:XX&amp;#34; -&amp;gt; flout def tomato2sec(tomato): sec = int(tomato[3:]) sec = sec + 60 * int(tomato[:2]) return sec # 秒数转显示时间 flout -&amp;gt; &amp;#34;XX:XX&amp;#34; def sec2tomato(sec): t = [] t.append(str(int(sec / 60))) t.append(str(int(sec % 60))) for i in range(0, len(t)): if len(t[i]) &amp;lt; 2: t[i] = &amp;#34;0&amp;#34; + t[i] tomato = &amp;#34;:&amp;#34;.join(t) return tomato 2. 获取系统时间 获取系统时间在python里我使用的是time包, 还有一个相似的是datetime.</description>
    </item>
    
    <item>
      <title>[T-CLK] Python&#43;Qt5项目环境的搭建</title>
      <link>https://dynais.github.io/project/posts/project.tclk.python&#43;qt5%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dynais.github.io/project/posts/project.tclk.python&#43;qt5%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</guid>
      <description>一. 软件 1. Pycharm 2019.3.3 ​	Pycharm主要负责进行主体逻辑的编写, 以及统筹整个项目, 此外环境的搭建大多也在Pycharm里完成
2. Qt 5.12.7 / Qt Creator ​	Qt原本是为C++设计的UI界面搭建软件, 通过加入Py包之后同样也可以为Python编写桌面图形应用程序, 这里用的是官网的免费版
二. 环境搭建(对于已有Anaconda3) 1.Python解释器 由于已经安装了Anaconda3, 所以没有再安装原生的解释器, 也不清楚, 但觉得应该可以通用
2. 配置环境变量(对于Anaconda3) 对于Anaconda3的用户, 需要再自行配置一下环境变量, 在环境变量的path选项卡中添加Anaconda的以下目录
不然在Pycharm中搭建环境时会遇到提示pip无法成功的提示, 导致包无法安装
3. 在Pycharm里搭建环境/安装必要的包 完成以上两步准备就可以开始配置Pycharm了
首先新建一个项目
有几点需要注意的地方:
首先, 确保New environment using中是新建了一个环境,而不是使用Conda.
其次, 确保Base interpreter中选择的是pythonw解释器, 而不是python
最后注意, 此处不需勾选
然后就可以让它新建一个项目了
打开工程后进入 文件 -&amp;gt; 设置 -&amp;gt; 项目 -&amp;gt; Project Interpreter 在这里管理需要用到的包文件
需要使用Qt编程的话, 必须添加QtPy和PyQt5两个包
Pycharm会自己管理, 下载好就算是配置完成了
三. 工作流 大致的思路是:
 使用Qt Creator创作图形界面 使用包内置函数转化Qt的.ui文件为.py文件, 作为包导入到程序中 使用Pycharm编写整体逻辑  1.</description>
    </item>
    
    
    
  </channel>
</rss>
