[{"content":"这次也是因为闲的在家没有事情做，所以又给自己开了一个新坑，其实蛮早以前就有过想做一个电脑上能用的指纹锁的想法了，但是一直没有动手，刚好这次有机会，并且也是刚刚新组了一台电脑，就想着要把这个项目给做了。\n这个项目的一个主要的灵感来源是@稚晖君很早以前发在Arduino论坛上的一个项目 (Link: 如何制作一个带指纹识别的机械键盘), 这次项目的的主要思路都和他的差不多，只不过我想做成独立的一个模块，并且最好能够实现便携功能，也就是说如果可以的话我想加上蓝牙的功能\n然后这次的文章大概也会写好几部分，具体取决于我最后能不能最后好好完成这个项目\u0026hellip;\n这是一个开源项目，后续也会一直更新进度，对你有帮助的话可以给我个星星，传送门：https://github.com/DynAis/duino-access\n0x00 - 前言  这次也是因为闲的在家没有事情做，所以又给自己开了一个新坑，其实蛮早以前就有过想做一个电脑上能用的指纹锁的想法了，但是一直没有动手，刚好这次有机会，并且也是刚刚新组了一台电脑，就想着要把这个项目给做了。\n这个项目的一个主要的灵感来源是@稚晖君很早以前发在Arduino论坛上的一个项目 (Link: 如何制作一个带指纹识别的机械键盘), 这次项目的的主要思路都和他的差不多，只不过我想做成独立的一个模块，并且最好能够实现便携功能，也就是说如果可以的话我想加上蓝牙的功能\n然后这次的文章大概也会写好几部分，具体取决于我最后能不能最后好好完成这个项目\u0026hellip;\n这是一个开源项目，后续也会一直更新进度，对你有帮助的话可以给我个星星，传送门：https://github.com/DynAis/duino-access\n   0x01 - 核心部分元器件选型 这次的目标是能够使用指纹解锁的方式让电脑自动解锁，思路是使用指纹模块给出信号+单片机模拟键盘输入的简单思路，由于整体的体积要求越小越好，所以元件的选型基本没有选择\n   使用模块 价格     arduino-pro-micro (VCC 5v or 3.3v) 19.80 CNY   HN0610 指纹模块 45.00 CNY   AMS1117-3.3v/5v 降压模块 (假如使用5v的arduino，3.3v的不需要) 1.29 CNY   蜂鸣器、导线若干 -    之所以没有用稚晖的那个FPM3X指纹模块的原因是因为那个好像在TB上已经快找不到了，只剩下最后一家而且卖的很贵，所以当时就选择了这个卖得最好的来做(有几天自闭的时候非常后悔这个选择)，并且从外观上来说我更喜欢这款一点\n   0x02 - 环境选择与搭建 VSCode + PlatformIO 整个环境方面没有使用传统的 ArduinoIDE 来做，而是选择的使用 VSCode 来完成这次的项目，主要原因是为了以后做其他单片机项目的时候也都统一到 VSCode上去，这样整个一致性会比较好\n最后选择了 VSCode 的 PlatformIO 拓展\n{% image fancybox center clear group:default https://dynais-imh-hub.oss-cn-hangzhou.aliyuncs.com/img/20200820184349.png 100% 100% \u0026quot; \u0026quot; %}\n直接在 VSCode 的拓展商店里搜索即可，点击安装即可安装插件，不用动什么脑子，安装过程会有些慢需要耐心等待一会，安装完成后如果成功了你应该可以在左下角看到这个小图标\n{% image fancybox center clear group:default https://dynais-imh-hub.oss-cn-hangzhou.aliyuncs.com/img/20200820184359.png 30% 30% \u0026quot; \u0026quot; %}\n恭喜，如果你看到了这个小房子，那你基本就是安装成功了，但是由于各种各样的原因，你也很有可能等了半天他也还是在转圈圈加载，像我一样\n{% image fancybox center clear group:default https://dynais-imh-hub.oss-cn-hangzhou.aliyuncs.com/img/20200820184405.png 90% 90% \u0026quot; \u0026quot; %}\n那么大概率他是不能自己装上了，我们只能来手动安装\n首先，如果你安装失败了，请先卸载原来的安装失败的 PlatformIO ，重启 VSCode，之后在VSCode的终端里输入\nsudo pip --no-cache-dir install -U platformio\n等待他安装完成，重启VSCode，重新去商店点一下安装，就可以顺利的装上了\n{% alert info %}\n如果依旧不行，可以尝试: 移除Anaconda(假如你安装了Anaconda环境)、安装Python2.7版本并且添加进环境变量、安装Python最新版本并添加进环境变量，如果这也不行，那就尝试使用ArduinoIDE吧(不过这样也许需要稍微改动下代码)\n{% endalert %}\n PlatformIO开发准备 点击Home按钮打开 PlatformIO 主界面，new project 后选择对应的板子，他会进行自动的初始化\n{% image fancybox center clear group:default https://dynais-imh-hub.oss-cn-hangzhou.aliyuncs.com/img/20200820184414.png 90% 90% \u0026quot; \u0026quot; %}\n初始化完成后，在src文件夹里就是我们的main文件\n{% image fancybox center clear group:default https://dynais-imh-hub.oss-cn-hangzhou.aliyuncs.com/img/20200820184421.png 90% 90% \u0026quot; \u0026quot; %}\nPlatformIO 和 ArduinoIDE 不同的地方就是，他是使用cpp文件来进行编译上传的，而不是ino文件，所以每个需要用到 Arduino 库的文件中，都需要包含#include \u0026quot;Arduino.h\u0026quot;才能够使用\n此外，比较麻烦的一点是，对于某些库的支持，也是需要我们手动来加入的，比如这块 Pro Micro 支持的HID键盘和鼠标的功能，就需要我们手动加入\n首先打开刚才的Home界面，在左边一栏里可以找到 Libraries\n{% image fancybox center clear group:default https://dynais-imh-hub.oss-cn-hangzhou.aliyuncs.com/img/20200820184426.png 40% 40% \u0026quot; \u0026quot; %}\n搜索keyboard，找到这个 Arduino 的官方库文件安装\n{% image fancybox center clear group:default https://dynais-imh-hub.oss-cn-hangzhou.aliyuncs.com/img/20200820184431.png 100% 100% \u0026quot; \u0026quot; %}\n安装完成以后，到左边的资源管理器，找到platformio.ini这个文件{% image fancybox center clear group:default https://dynais-imh-hub.oss-cn-hangzhou.aliyuncs.com/img/20200820184436.png 70% 70% \u0026quot; \u0026quot; %}\n在文件最后加入\nlib_deps = Keyboard 告诉他我们要调用这个库，这样就完成了，可以开始硬件部分的测试了\n   0x03 - 硬件部分 {% alert warning %}\n一定要注意指纹模块的供电是3.3v，使用5v虽然不会烧坏模块但是会无法工作(当初因为这个原因卡了好久不知道哪错了)\n{% endalert %}\n指纹模块的话是线给剪了直接焊在了板子上，有点粗糙\n{% image fancybox center clear group:default https://dynais-imh-hub.oss-cn-hangzhou.aliyuncs.com/img/20200820184449.jpg 100% 100% \u0026quot; \u0026quot; %}\n看不清楚的话也可以看源文件里 /lib/HN0610/pinDef.h 里的内容\n最后附上Micro的引脚图\n{% image fancybox center clear group:default https://dynais-imh-hub.oss-cn-hangzhou.aliyuncs.com/img/20200820184454.png 100% 100% \u0026quot; \u0026quot; %}\n 测试指纹模块 修改 /src/min.cpp 文件中参数调整宏定义区域的参数 DASTATE 就可以设定当前运行在什么模式下，由于是测试，就把值改为0，运行在检测手指模式上，其他模式的定义也在下面给出\n   功能实现 DASTATE值     检测手指按压 0   指纹注册 1   验证指纹(最后留这一个) 2   检测手指按压后输出硬件信息(需要打开电脑串口) 3   清除所有指纹信息 4    点击上传烧录进Arduino\n如果没有问题的话，按下手指蜂鸣器就会鸣响了\n   0x04 - 遇到的坑和问题 1. 底层数据类型定义问题 通常来说，开发单片机会定义一系列的UINT\n在这次，定义文件写在了 hzTypes.h 文件里，其中对于UINT32的定义出现了兼容错误\n原始内容是\n{% image fancybox center clear group:default https://dynais-imh-hub.oss-cn-hangzhou.aliyuncs.com/img/20200820184458.png 100% 100% \u0026quot; \u0026quot; %}\n我猜测可能是由于他们使用的单片机上int是32位，所以能够正常运行，而在Arduino上，int并不是32位的，long才是，所以需要改为\n{% image fancybox center clear group:default https://dynais-imh-hub.oss-cn-hangzhou.aliyuncs.com/img/20200820184502.png 100% 100% \u0026quot; \u0026quot; %}\n 2.电源的坑 已经说过了，不过这次也是因为在家里没有万用表的缘故，并且提醒，虽然原理图上有一个SJ1来控制Micro的输出电压是5v还是3.3v，但是你并不可以通过连接或者断开这个引脚来达到修改电压的目的，因为5v的Micro和3.3v的Micro主频也是不一样的，这会导致工作不稳定\n并且很有可能改了也没有作用(对于很多国产板)\n{% image fancybox center clear group:default https://dynais-imh-hub.oss-cn-hangzhou.aliyuncs.com/img/20200820184513.png 100% 100% \u0026quot; \u0026quot; %}\n 3.注意Micro的中断脚 因为这个指纹识别模块还有自动休眠的功能，所以虽然我现在并没有使用，但是很有可能会用到这个模块的中断信号，那么就要注意Micro的中断引脚定义和Uno是不一样的\n   PIN 中断号     3 0   2 1   0 2   1 3   7 6       0x05 - 后续开发 库HN610    文件名 内容     auth 通讯签名算法(默认不签名)   fp 大部分能直接用的API   fpmComm 模块命令API   hzDevice 串口通信底层   pinDef 主板引脚定义   hzTypes 数据类型定义    ","permalink":"https://dynais.github.io/project/posts/project.da.duinoaccess/","summary":"这次也是因为闲的在家没有事情做，所以又给自己开了一个新坑，其实蛮早以前就有过想做一个电脑上能用的指纹锁的想法了，但是一直没有动手，刚好这次有机会，并且也是刚刚新组了一台电脑，就想着要把这个项目给做了。\n这个项目的一个主要的灵感来源是@稚晖君很早以前发在Arduino论坛上的一个项目 (Link: 如何制作一个带指纹识别的机械键盘), 这次项目的的主要思路都和他的差不多，只不过我想做成独立的一个模块，并且最好能够实现便携功能，也就是说如果可以的话我想加上蓝牙的功能\n然后这次的文章大概也会写好几部分，具体取决于我最后能不能最后好好完成这个项目\u0026hellip;\n这是一个开源项目，后续也会一直更新进度，对你有帮助的话可以给我个星星，传送门：https://github.com/DynAis/duino-access\n0x00 - 前言  这次也是因为闲的在家没有事情做，所以又给自己开了一个新坑，其实蛮早以前就有过想做一个电脑上能用的指纹锁的想法了，但是一直没有动手，刚好这次有机会，并且也是刚刚新组了一台电脑，就想着要把这个项目给做了。\n这个项目的一个主要的灵感来源是@稚晖君很早以前发在Arduino论坛上的一个项目 (Link: 如何制作一个带指纹识别的机械键盘), 这次项目的的主要思路都和他的差不多，只不过我想做成独立的一个模块，并且最好能够实现便携功能，也就是说如果可以的话我想加上蓝牙的功能\n然后这次的文章大概也会写好几部分，具体取决于我最后能不能最后好好完成这个项目\u0026hellip;\n这是一个开源项目，后续也会一直更新进度，对你有帮助的话可以给我个星星，传送门：https://github.com/DynAis/duino-access\n   0x01 - 核心部分元器件选型 这次的目标是能够使用指纹解锁的方式让电脑自动解锁，思路是使用指纹模块给出信号+单片机模拟键盘输入的简单思路，由于整体的体积要求越小越好，所以元件的选型基本没有选择\n   使用模块 价格     arduino-pro-micro (VCC 5v or 3.3v) 19.80 CNY   HN0610 指纹模块 45.00 CNY   AMS1117-3.3v/5v 降压模块 (假如使用5v的arduino，3.3v的不需要) 1.29 CNY   蜂鸣器、导线若干 -    之所以没有用稚晖的那个FPM3X指纹模块的原因是因为那个好像在TB上已经快找不到了，只剩下最后一家而且卖的很贵，所以当时就选择了这个卖得最好的来做(有几天自闭的时候非常后悔这个选择)，并且从外观上来说我更喜欢这款一点\n   0x02 - 环境选择与搭建 VSCode + PlatformIO 整个环境方面没有使用传统的 ArduinoIDE 来做，而是选择的使用 VSCode 来完成这次的项目，主要原因是为了以后做其他单片机项目的时候也都统一到 VSCode上去，这样整个一致性会比较好","title":"DuinoAccess"},{"content":"项目进度   重构了代码\n  修正了大部分bug\n  一. 重要代码模块 1. Qtimer  https://blog.csdn.net/jia666666/article/details/81672344\n Qtimer是Qt自带的定时器类, 位于PyQt5.Qcore下, 和单片机的中断函数非常像, 并且提供单次触发和多次触发两种触发方式\n多次触发 timer.timeout.connect(function) ... timer = Qtimer() timer.start(1000) 这里timeout是Qtimer的中断信号, 这里设定timer.start(1000)代表每一秒执行一次中断, 在番茄钟里, 我使用这个中断来进行时间的更新, 时间的更新仍然使用的是原生的time模块\n如果要停止Qtimer,使用\ntimer.stop() 2. 自定义信号  https://blog.csdn.net/foreveronly/article/details/82453697\n 二. 已解决的问题 1. 拖动窗口时时间不走动的问题 加完Qtimer中断完全没有问题\n3. 进程无法完全退出问题 -\u0026gt; window.close()效果问题 -\u0026gt; 响铃bug 通过将子窗口变为主窗口类的成员, 并使用以下语句初始化\nclass MainWindow(QMainWindow): def __init__(self): super().__init__() #子窗口建立 self.subBreak = BreakWindow(self)# 注意这里 class BreakWindow(QDialog): def __init__(self,parent=None): super().__init__(parent) 关键也就是加入def __init__(self,parent=None), 使主从窗口关联起来(具体实现逻辑尚不清晰), 再加上合理的退出判断, 就可以实现干净的退出了\n响铃bug加完Qtimer中断完后全没有问题\n4. 占用cpu过高问题 加完Qtimer中断完全没有问题\n5. 交互逻辑混乱问题 通过重构代码逻辑解决了, 现在所有的子窗口都是主窗口的成员了\n三. 待解决的问题 1. Qt里写了中文uic()命令就无法成功执行的问题 暂时没有思路\n四. 下一阶段的目标 1. 实现使用时间的统计模块, 尝试使用Mysql来储存数据? 五. 总结 再此理解了那句话, 不能让程序假死, 比如之前我想要time.sleep()来实现\u0026hellip;\n正确使用中断是很重要的, 这方面还要多加练习\n并且另外很重要的一点就是, 使用一个库里现成的东西往往整个的整合度会更好\n本来甚至都准备上多线程了\u0026hellip;\n","permalink":"https://dynais.github.io/project/posts/project.tclk.%E7%95%AA%E8%8C%84%E9%92%9F%E9%87%8D%E6%9E%84/","summary":"项目进度   重构了代码\n  修正了大部分bug\n  一. 重要代码模块 1. Qtimer  https://blog.csdn.net/jia666666/article/details/81672344\n Qtimer是Qt自带的定时器类, 位于PyQt5.Qcore下, 和单片机的中断函数非常像, 并且提供单次触发和多次触发两种触发方式\n多次触发 timer.timeout.connect(function) ... timer = Qtimer() timer.start(1000) 这里timeout是Qtimer的中断信号, 这里设定timer.start(1000)代表每一秒执行一次中断, 在番茄钟里, 我使用这个中断来进行时间的更新, 时间的更新仍然使用的是原生的time模块\n如果要停止Qtimer,使用\ntimer.stop() 2. 自定义信号  https://blog.csdn.net/foreveronly/article/details/82453697\n 二. 已解决的问题 1. 拖动窗口时时间不走动的问题 加完Qtimer中断完全没有问题\n3. 进程无法完全退出问题 -\u0026gt; window.close()效果问题 -\u0026gt; 响铃bug 通过将子窗口变为主窗口类的成员, 并使用以下语句初始化\nclass MainWindow(QMainWindow): def __init__(self): super().__init__() #子窗口建立 self.subBreak = BreakWindow(self)# 注意这里 class BreakWindow(QDialog): def __init__(self,parent=None): super().__init__(parent) 关键也就是加入def __init__(self,parent=None), 使主从窗口关联起来(具体实现逻辑尚不清晰), 再加上合理的退出判断, 就可以实现干净的退出了","title":"[T-CLK] 番茄钟重构"},{"content":"项目进度  加入了自己指定时间的模块   加入保存用户设置的文件config.json 在倒计时结束时发出铃声通知 完善了除统计和To Do List外的Menu界面   修正了部分bug  一. 重要代码模块 1. 打包程序成exe文件 pyInstaller模块 pyInstaller是python的一个库, 使用它可以很方便的打包文件成为exe可执行文件\n要使用这个库, 首先在Pycharm里安装相应的环境, 之后新建一个.py文件, 比如我的:\n在里面输入代码(以这次工程为例):\nimport os if __name__ == \u0026#39;__main__\u0026#39;: from PyInstaller.__main__ import run opts=[\u0026#39;main.py\u0026#39;,\u0026#39;-w\u0026#39;,\u0026#39;-F\u0026#39;,\u0026#39;--icon=image/tomato.ico\u0026#39;] run(opts) 其中主要注意opts=['main.py','-w','-F','--icon=image/tomato.ico']这一句\nmain.py是主文件, 是进程的入口\n-w这个参数使编译出来的文件时exe+文件的形式, 去掉这个参数编译出来是一个整体的exe文件\n-F参数强制编译, 也就是说本次会覆盖上次的文件, 我觉得加上比较好\n最后--icon=image/tomato.ico是我指定的exe文件图标, 需要是一个ico文件\n直接运行.py脚本就可以在/dist里得到编译的文件\n资源文件夹问题 本次制作番茄钟使用到的资源文件, 比如配置文件, 或者是.MP3的铃声文件, pyInstaller在编译的时候都是不会编译的, 也就是说需要自己将文件复制到产生出来的目录下, 不然程序会报错无法运行\n2. 读取和写入配置文件 使用Json作为配置文件 Json是一种常见的语言, 其中一种用法就是作为书写配置文件的语言, 虽然有人说它不适合作为配置文件语言, 但是小项目用用还是没有问题的\nJson配置文件以{开头, 以}结束, 大括号在Json里代表一个对象, 具有一个键与一个值, 用:对应,\n可以理解为Python里的字典(其实就是)\n用Python的语法来看Json没有一点问题\n如\n{\u0026#34;tomato\u0026#34;: {\u0026#34;t_target\u0026#34;: \u0026#34;00:05\u0026#34;, \u0026#34;t_break\u0026#34;: \u0026#34;00:05\u0026#34;}} 值得注意的是Json对语法的要求非常严格, 并且不可以有注释\nPython3读取Json文件 Python官方内置了Json的使用库\nimport json #假设config是一个字典 # Json读取 with open(\u0026#34;config.json\u0026#34;, \u0026#34;r\u0026#34;) as c: config = json.load(c) # Json写入 with open(\u0026#34;config.json\u0026#34;, \u0026#34;w\u0026#34;) as c: json.dump(config, c) 读取文件以字典形式展现, 写入的变量也需要是一个字典\n3. 在对象方法定义里直接调用具体的实例 发现在对象的方法定义里, 可以直接调用看起来还没有定义的实例, 比如\nclass BreakWindow(QtWidgets.QDialog): ... def start_a_new_tomato(self): ... window.start_a_tomato() 在这里我定义了BreakWindow类, 方法里调用了window.start_a_tomato(), window是另一个类, 并且在后文才定义(当然是在方法调用之前)\n4. 循环不退出? - 使用flag标志的重要性 因为循环不退出而产生bug已经不知道多少次了, 以后注意在书写循环的时候一定要提前想好尽可能全的情况, 并且写好flag, 循环不在该退的时候退真的很讨厌\n二. 已解决的问题 1. 在Python中播放声音/音乐 - playsound包 在环境里加入playsound包\n调用使用\nfrom playsound import playsound playsound(\u0026#34;sound/XXXX.mp3\u0026#34;) 真的是非常简单的API了\n但是缺点也是太简单了, 几乎没有其他的可操作选项了, 可以看的出来作者基本也是没有什么经验的\n还有一个就是响铃的速度好像不是很快\n2. 窗口关闭事件信号 - 重写closeEvent()方法 在窗口关闭时, 会执行.closeEvent()方法, 通过重写这个方法, 可以达到检测窗口关闭的效果\ndef closeEvent(self, event): event.accept() 3. 验证窗口是否在关闭 - isHidden() 三. 待解决的问题 1. 拖动窗口时时间不走动的问题 暂时没有思路\n2. Qt里写了中文uic()命令就无法成功执行的问题 暂时没有思路\n3. 进程无法完全退出问题 -\u0026gt; window.close()效果问题 -\u0026gt; 响铃bug 4. 占用cpu过高问题 猜测是在循环时关闭窗口导致循环还在后台运行, 没有正常退出的问题\n但怎么说这个占用也太夸张了吧就算是我有个循环\n你一个循环凭什么吃掉我1/4个CPU啊\n5. 交互逻辑混乱问题 完全是我的锅, 因为各种小bug, 以及前期准备不足, 经验不到位, 结果使得各种循环判断, 各种地方交错调用, 命名没规范之类\u0026hellip;\n导致出现大问题无从下手, 如果要进一步给软件加入功能, 最起码的, 让他**\u0026ldquo;能用\u0026rdquo;**, 是肯定要重构代码的\n四. 下一阶段的目标  代码重构 五. 总结 虽然程序交互有很大进步, 但还是可以看出我的经验不足, 前期准备缺乏, 导致结构混乱, 后期出现Bug无从下手\n经过这次教训, 我知道了前期纸上的准备和写代码同样重要, 写代码和我整理电脑一样, 都不可以把东西随意乱放, 不然图一时之快只会给以后的自己带来麻烦\n虽然标题上写着**\u0026ldquo;又不是不能用\u0026rdquo;, 但CPU占用如此之高, 进程无法干净退出, 无故响铃的软件, 确实就是\u0026ldquo;不能用\u0026rdquo;**的\n","permalink":"https://dynais.github.io/project/posts/project.tclk.%E7%95%AA%E8%8C%84%E9%92%9F%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD%E5%BB%BA%E8%AE%BE/","summary":"项目进度  加入了自己指定时间的模块   加入保存用户设置的文件config.json 在倒计时结束时发出铃声通知 完善了除统计和To Do List外的Menu界面   修正了部分bug  一. 重要代码模块 1. 打包程序成exe文件 pyInstaller模块 pyInstaller是python的一个库, 使用它可以很方便的打包文件成为exe可执行文件\n要使用这个库, 首先在Pycharm里安装相应的环境, 之后新建一个.py文件, 比如我的:\n在里面输入代码(以这次工程为例):\nimport os if __name__ == \u0026#39;__main__\u0026#39;: from PyInstaller.__main__ import run opts=[\u0026#39;main.py\u0026#39;,\u0026#39;-w\u0026#39;,\u0026#39;-F\u0026#39;,\u0026#39;--icon=image/tomato.ico\u0026#39;] run(opts) 其中主要注意opts=['main.py','-w','-F','--icon=image/tomato.ico']这一句\nmain.py是主文件, 是进程的入口\n-w这个参数使编译出来的文件时exe+文件的形式, 去掉这个参数编译出来是一个整体的exe文件\n-F参数强制编译, 也就是说本次会覆盖上次的文件, 我觉得加上比较好\n最后--icon=image/tomato.ico是我指定的exe文件图标, 需要是一个ico文件\n直接运行.py脚本就可以在/dist里得到编译的文件\n资源文件夹问题 本次制作番茄钟使用到的资源文件, 比如配置文件, 或者是.MP3的铃声文件, pyInstaller在编译的时候都是不会编译的, 也就是说需要自己将文件复制到产生出来的目录下, 不然程序会报错无法运行\n2. 读取和写入配置文件 使用Json作为配置文件 Json是一种常见的语言, 其中一种用法就是作为书写配置文件的语言, 虽然有人说它不适合作为配置文件语言, 但是小项目用用还是没有问题的\nJson配置文件以{开头, 以}结束, 大括号在Json里代表一个对象, 具有一个键与一个值, 用:对应,\n可以理解为Python里的字典(其实就是)\n用Python的语法来看Json没有一点问题","title":"[T-CLK] 番茄钟基本功能建设"},{"content":"项目进度  实现了番茄钟最基本的倒计时功能 实现了按钮交互的功能  一. 重要代码模块 1. 显示时间与计算时间的转换 实现倒计时时的一个问题是: 显示的时间格式需要是\u0026quot;XX:XX\u0026quot;, 但是为了方便计算, 需要把这个格式的时间转化为秒数的形式, 这就需要一个显示时间与计算时间互相转换的模块\n# 显示时间转秒数 \u0026#34;XX:XX\u0026#34; -\u0026gt; flout def tomato2sec(tomato): sec = int(tomato[3:]) sec = sec + 60 * int(tomato[:2]) return sec # 秒数转显示时间 flout -\u0026gt; \u0026#34;XX:XX\u0026#34; def sec2tomato(sec): t = [] t.append(str(int(sec / 60))) t.append(str(int(sec % 60))) for i in range(0, len(t)): if len(t[i]) \u0026lt; 2: t[i] = \u0026#34;0\u0026#34; + t[i] tomato = \u0026#34;:\u0026#34;.join(t) return tomato 2. 获取系统时间 获取系统时间在python里我使用的是time包, 还有一个相似的是datetime.time包, 注意不要搞混了\nimport time 倒计时的基本思路是点击开始按钮时获取一个开启的系统时间, 然后用户会有一个给定的目标时间, 然后点按钮以后会进入一个循环, 知道计时结束才会退出, 在循环里面一直获取系统时间和其实时间运算就得到了已经过了多久, 再和目标时间判断就行了\nt_start = time.time() 这个语句是获取以秒数显示的当前系统时间, 用于运算会比较方便\n3. 页面元素的交互 简单的页面元素交互可以在Qt里直接实现\n原理基本上是, 按下按钮之类的东西, 会发出一个信号\nui_window.button_start.clicked这个信号就是ui_window这个窗口下button_start按钮发出的点击信号, 使用connect绑定一个slot之后\nui_window.button_start.clicked.connect(start_a_tomato) 在这里的意思就是: 单击这个按钮以后执行start_a_tomato函数, 注意函数名在这里不带括号\n二. 已解决的问题 1. 倒计时使用time.sleep()效果不好的问题 最开始的思路里, 用户点击开始后进入一个循环, 这个循环每次执行一秒, 然后让页面更新一次, 用到的函数是这个\nimport time time.sleep(1)\t#控制系统空置一秒 但是问题就是, 和单片机上不能乱用delay()一样, 使用sleep()会使程序整个无法响应, 导致拖拽手感奇怪, 且拖拽时倒计时直接停止\n然后换了思路, 直接不断读取系统时间实时刷新, 解决了拖拽手感的问题, 但拖拽时倒计时还是会停止, 不过放下窗口后时间并不会出错, 就先不管了\n2. 改变窗口元素但窗口显示不刷新的问题 最开始在循环里改变了元素, 但发现直到循环退出窗口才改变了显示, 但使用print输出又没什么问题, 于是想可能是窗口刷新的问题, 最后的解决办法就一条指令\nQtWidgets.QApplication.processEvents() 让窗口刷新\n三. 待解决的问题 1. 拖动窗口时时间不走动的问题 暂时没有思路\n2. Qt里写了中文uic()命令就无法成功执行的问题 应该是编码不统一的问题, 但是改了Qt的编码几次还是不行, 暂时先用英文顶着, 看看以后有没有解决办法\n暂时没有思路\n四. 下一阶段的目标  加入自己指定时间的模块 加入保存用户设置的文件 在倒计时结束时尝试发出通知  ","permalink":"https://dynais.github.io/project/posts/project.tclk.%E7%95%AA%E8%8C%84%E9%92%9F%E5%80%92%E8%AE%A1%E6%97%B6%E6%A8%A1%E5%9D%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0/","summary":"项目进度  实现了番茄钟最基本的倒计时功能 实现了按钮交互的功能  一. 重要代码模块 1. 显示时间与计算时间的转换 实现倒计时时的一个问题是: 显示的时间格式需要是\u0026quot;XX:XX\u0026quot;, 但是为了方便计算, 需要把这个格式的时间转化为秒数的形式, 这就需要一个显示时间与计算时间互相转换的模块\n# 显示时间转秒数 \u0026#34;XX:XX\u0026#34; -\u0026gt; flout def tomato2sec(tomato): sec = int(tomato[3:]) sec = sec + 60 * int(tomato[:2]) return sec # 秒数转显示时间 flout -\u0026gt; \u0026#34;XX:XX\u0026#34; def sec2tomato(sec): t = [] t.append(str(int(sec / 60))) t.append(str(int(sec % 60))) for i in range(0, len(t)): if len(t[i]) \u0026lt; 2: t[i] = \u0026#34;0\u0026#34; + t[i] tomato = \u0026#34;:\u0026#34;.join(t) return tomato 2. 获取系统时间 获取系统时间在python里我使用的是time包, 还有一个相似的是datetime.","title":"[T-CLK] 番茄钟倒计时模块的基本实现"},{"content":"一. 软件 1. Pycharm 2019.3.3 ​\tPycharm主要负责进行主体逻辑的编写, 以及统筹整个项目, 此外环境的搭建大多也在Pycharm里完成\n2. Qt 5.12.7 / Qt Creator ​\tQt原本是为C++设计的UI界面搭建软件, 通过加入Py包之后同样也可以为Python编写桌面图形应用程序, 这里用的是官网的免费版\n二. 环境搭建(对于已有Anaconda3) 1.Python解释器 由于已经安装了Anaconda3, 所以没有再安装原生的解释器, 也不清楚, 但觉得应该可以通用\n2. 配置环境变量(对于Anaconda3) 对于Anaconda3的用户, 需要再自行配置一下环境变量, 在环境变量的path选项卡中添加Anaconda的以下目录\n不然在Pycharm中搭建环境时会遇到提示pip无法成功的提示, 导致包无法安装\n3. 在Pycharm里搭建环境/安装必要的包 完成以上两步准备就可以开始配置Pycharm了\n首先新建一个项目\n有几点需要注意的地方:\n首先, 确保New environment using中是新建了一个环境,而不是使用Conda.\n其次, 确保Base interpreter中选择的是pythonw解释器, 而不是python\n最后注意, 此处不需勾选\n然后就可以让它新建一个项目了\n打开工程后进入 文件 -\u0026gt; 设置 -\u0026gt; 项目 -\u0026gt; Project Interpreter 在这里管理需要用到的包文件\n需要使用Qt编程的话, 必须添加QtPy和PyQt5两个包\nPycharm会自己管理, 下载好就算是配置完成了\n三. 工作流 大致的思路是:\n 使用Qt Creator创作图形界面 使用包内置函数转化Qt的.ui文件为.py文件, 作为包导入到程序中 使用Pycharm编写整体逻辑  1. 使用Qt Creator创作图形界面 打开Qt Creator新建工程\n注意创建时选择桌面图形应用, 这里不需要选Python的那个\n工程最好命名为ui, 保存在一个项目文件夹下\n2. 使用包内置函数转化Qt的.ui文件为.py文件, 作为包导入到程序中 在Pycharm中新建一个builder.py文件\nfrom qtpy import uic uic.compileUiDir(\u0026#34;这里填入Qt工程的文件夹路径\u0026#34;) 运行便可以得到一个.py文件, 里面是应用程序外观的描述\n在主程序py文件中写入\nimport sys from qtpy import QtWidgets from ui.mainwindow import Ui_MainWindow app = QtWidgets.QApplication(sys.argv)\t#设置一个App window = QtWidgets.QMainWindow()\t#新建一个窗口 ui_window = Ui_MainWindow()\t#新建一个导入包中窗口的类 ui_window.setupUi(window)\t#注意自己的窗口要填入括号 window.setWindowTitle(\u0026#34;Tomato Clock v0\u0026#34;)\t#设置标题 window.show()\t#显示窗口 sys.exit(app.exec_())\t#设置退出 设置完成\n","permalink":"https://dynais.github.io/project/posts/project.tclk.python+qt5%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/","summary":"一. 软件 1. Pycharm 2019.3.3 ​\tPycharm主要负责进行主体逻辑的编写, 以及统筹整个项目, 此外环境的搭建大多也在Pycharm里完成\n2. Qt 5.12.7 / Qt Creator ​\tQt原本是为C++设计的UI界面搭建软件, 通过加入Py包之后同样也可以为Python编写桌面图形应用程序, 这里用的是官网的免费版\n二. 环境搭建(对于已有Anaconda3) 1.Python解释器 由于已经安装了Anaconda3, 所以没有再安装原生的解释器, 也不清楚, 但觉得应该可以通用\n2. 配置环境变量(对于Anaconda3) 对于Anaconda3的用户, 需要再自行配置一下环境变量, 在环境变量的path选项卡中添加Anaconda的以下目录\n不然在Pycharm中搭建环境时会遇到提示pip无法成功的提示, 导致包无法安装\n3. 在Pycharm里搭建环境/安装必要的包 完成以上两步准备就可以开始配置Pycharm了\n首先新建一个项目\n有几点需要注意的地方:\n首先, 确保New environment using中是新建了一个环境,而不是使用Conda.\n其次, 确保Base interpreter中选择的是pythonw解释器, 而不是python\n最后注意, 此处不需勾选\n然后就可以让它新建一个项目了\n打开工程后进入 文件 -\u0026gt; 设置 -\u0026gt; 项目 -\u0026gt; Project Interpreter 在这里管理需要用到的包文件\n需要使用Qt编程的话, 必须添加QtPy和PyQt5两个包\nPycharm会自己管理, 下载好就算是配置完成了\n三. 工作流 大致的思路是:\n 使用Qt Creator创作图形界面 使用包内置函数转化Qt的.ui文件为.py文件, 作为包导入到程序中 使用Pycharm编写整体逻辑  1.","title":"[T-CLK] Python+Qt5项目环境的搭建"}]