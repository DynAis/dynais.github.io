[{"content":"解决ipy笔记本直接切换环境报错问题\n在当前虚拟环境下安装 ipykernel\nconda install -c anaconda ipykernel 参考 https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084 ","permalink":"https://dynais.github.io/code/posts/code.python.%E5%9C%A8jupyternotebook%E4%B8%AD%E5%88%87%E6%8D%A2%E7%8E%AF%E5%A2%83/","summary":"\u003cp\u003e解决ipy笔记本直接切换环境报错问题\u003c/p\u003e","title":"在JupyterNotebook中切换环境"},{"content":"描述了如何开箱即用的使用TTS框架进行文本转语音\n前置知识 TTS(架构知识) Git 1 安装(使用Git) 对于需要后续进行模型训练的目的来说, 官方推荐使用Git的方式进行安装\n进入项目地址https://github.com/coqui-ai/TTS找到Git链接后 git clone 到想要安装的文件夹\n之后再使用 pip 进行安装(在TTS文件夹中, 路径下看见 [setup.py](http://setup.py) 就对了)\ngit clone https://github.com/coqui-ai/TTS pip install -e .[all,dev,notebooks,tf] # Select the relevant extras 安装会有点久\n2 使用现有模型进行语音合成 首先可以键入\ntts --list_models 进行现有模型的查看(包括TTS模型和Vocoder模型, 一般是成对的, 也需要成对使用, 也有的模型没有Vocoder, 那么它的效果可能会差一点, 但也能用)\n然后输入以下的命令生成语音, --model_name 和--vocoder_name 就是上面列出的那些模型, 选择需要的填入就行了\ntts --text \u0026#34;YOUR_TEXT\u0026#34; --model_name \u0026#34;MODEL_NAME\u0026#34; --vocoder_name \u0026#34;VOCODER_NAME\u0026#34; 如果当前使用的模型不存在, 会直接进行下载模型, 会持续相当长的一段时间, 且没有进度提示, 耐心.\n结束后会生成 .wav 文件在当前的路径下, 语音最短似乎是六秒钟.\n参考 https://github.com/coqui-ai/TTS https://tts.readthedocs.io/en/latest/training_a_model.html https://tts.readthedocs.io/en/latest/formatting_your_dataset.html#formatting-your-dataset https://github.com/coqui-ai/TTS/wiki/What-makes-a-good-TTS-dataset https://tts.readthedocs.io/en/latest/faq.html https://tts.readthedocs.io/en/latest/finetuning.html ","permalink":"https://dynais.github.io/code/posts/code.tts.%E4%BD%BF%E7%94%A8couqi-tts%E4%BB%8E%E6%96%87%E5%AD%97%E7%94%9F%E6%88%90%E8%AF%AD%E9%9F%B3/","summary":"\u003cp\u003e描述了如何开箱即用的使用TTS框架进行文本转语音\u003c/p\u003e","title":"使用couqi-TTS从文字生成语音"},{"content":"防Colab踢你下线😢\n代码 复制输入网页控制台\nfunction ClickConnect(){ console.log(\u0026#34;Working\u0026#34;); document.querySelector(\u0026#34;colab-toolbar-button#connect\u0026#34;).click() } setInterval(ClickConnect,60000) 参考 https://www.cnblogs.com/clemente/p/12395195.html ","permalink":"https://dynais.github.io/code/posts/code.python.colab%E8%87%AA%E5%8A%A8%E6%8C%82%E6%9C%BA%E4%BB%A3%E7%A0%81/","summary":"\u003cp\u003e防Colab踢你下线😢\u003c/p\u003e","title":"Colab自动挂机代码"},{"content":"通过以下两篇文章应该能看懂大部分编程时使用的UML类图\n参考 https://www.jianshu.com/p/57620b762160 https://www.cnblogs.com/shindo/p/5579191.html ","permalink":"https://dynais.github.io/code/posts/code.uml%E7%B1%BB%E5%9B%BE/","summary":"\u003cp\u003e通过以下两篇文章应该能看懂大部分编程时使用的UML类图\u003c/p\u003e","title":"UML类图"},{"content":"UTF8的基本知识\n1 Unicode Unicode，联盟官方中文名称为统一码. 这是一个字符编码的标准, 就是给字符表里的抽象字符编上一个数字，也就是字符集合到一个整数集合的映射。这种映射称为编码字符集（CCS:Coded Character Set）,unicode 是属于这一层的概念，跟计算机里的什么进制啊没有任何关系，它是完全数学的抽象的.\nUnicode 称这个编号为这个字符的码点, 通常使用 U+XXXX 表示, U+后面的是十六进制字符.\n比如\nI 0049 t 0074 \u0026#39; 0027 s 0073 0020 知 77e5 乎 4e4e 日 65e5 报 62a5 而如何有效的把这个编码映射到1和0的排列上, 就是UTF-8规定的事情.\n2 UTF-8编码 以最朴素的想法来说, 直接将 Unicode 对应的字符编号转换为二进制会如何呢? 会造成不必要的空间浪费, 因为就编码理论来说, 出现概率小的字符拥有较小的编码长度是理所应当的.\n所以 UTF-8 出现了\nUTF-8 是目前互联网上使用最广泛的一种 Unicode 编码方式，它的最大特点就是**可变长。它可以使用 1 - 4 个字节表示一个字符，根据字符的不同变换长度.**编码规则如下：\n对于单个字节的字符，第一位设为 0，后面的 7 位对应这个字符的 Unicode 码点。因此，对于英文中的 0 - 127 号字符，与 ASCII 码完全相同。这意味着 ASCII 码那个年代的文档用 UTF-8 编码打开完全没有问题。 对于需要使用 N 个字节来表示的字符（N \u0026gt; 1），第一个字节的前 N 位都设为 1，第 N + 1 位设为 0，剩余的 N - 1 个字节的前两位都设位 10，剩下的二进制位则使用这个字符的 Unicode 码点来填充(前0补足). 编码规则如下：\nUTF-8编码\n根据上面编码规则对照表，进行 UTF-8 编码和解码就简单多了。下面以汉字“汉”为利，具体说明如何进行 UTF-8 编码和解码。\n“汉”的 Unicode 码点是 0x6c49（110 1100 0100 1001），通过上面的对照表可以发现，0x0000 6c49 位于第三行的范围，那么得出其格式为 1110xxxx 10xxxxxx 10xxxxxx。接着，从“汉”的二进制数最后一位开始，从后向前依次填充对应格式中的 x，多出的 x 用 0 补上。这样，就得到了“汉”的 UTF-8 编码为 11100110 10110001 10001001，转换成十六进制就是 0xE6 0xB7 0x89。\n解码的过程也十分简单：如果一个字节的第一位是 0 ，则说明这个字节对应一个字符；如果一个字节的第一位 1，那么连续有多少个 1，就表示该字符占用多少个字节。\n参考 https://www.zhihu.com/question/23374078 https://zh.wikipedia.org/wiki/Unicode https://liyucang-git.github.io/2019/06/17/彻底弄懂Unicode编码/ ","permalink":"https://dynais.github.io/code/posts/code.utf8%E7%BC%96%E8%A7%A3%E7%A0%81/","summary":"\u003cp\u003eUTF8的基本知识\u003c/p\u003e","title":"UTF8编解码"},{"content":"使用Conda更方便得管理Python环境\n1 创建环境 conda create -n NAME python=3.9 2 删除环境 conda remove -n NAME --all 3 激活环境 //激活某个环境 conda activate NAME //返回base环境 conda activate 4 验证环境 conda info --envs 5 管理Package /*1.先激活要搜索的环境,然后检查 Anaconda 存储库中是否有尚未安装的名为“beautifulsoup4”的包*/ conda search beautifulsoup4 /*2.Conda 在 Anaconda 存储库中显示具有该名称的所有包的列表，因此我们知道它可用。*/ conda install beautifulsoup4 /*3.查看新安装的程序是否在这个环境中：*/ conda list 参考 https://blog.csdn.net/H_O_W_E/article/details/77370456 https://conda.io/projects/conda/en/latest/user-guide/getting-started.html ","permalink":"https://dynais.github.io/code/posts/code.python.%E4%BD%BF%E7%94%A8anaconda%E7%AE%A1%E7%90%86python%E7%8E%AF%E5%A2%83/","summary":"\u003cp\u003e使用Conda更方便得管理Python环境\u003c/p\u003e","title":"使用Anaconda管理Python环境"},{"content":"配置Jupyter Notebook默认工作路径\n方法 在 Terminal 输入 jupyter notebook --generate-config 建立配置文件, 记录输出路径 在这个路径下找到 jupyter_notebook_config.py 文件, 修改文件 ## The directory to use for notebooks and kernels. #c.NotebookApp.notebook_dir = \u0026#39;\u0026#39; 更改为\n## The directory to use for notebooks and kernels. c.NotebookApp.notebook_dir = \u0026#39;D:\\your\\dir\u0026#39; 注意改完之后如果使用快捷方式打开大概率会没用, 因为快捷方式里还带着一个 -%USERFILE 的后缀, 删掉就好了\n参考 https://blog.csdn.net/u014552678/article/details/62046638 ","permalink":"https://dynais.github.io/code/posts/code.python.%E9%85%8D%E7%BD%AEjupyter-notebook%E9%BB%98%E8%AE%A4%E5%B7%A5%E4%BD%9C%E8%B7%AF%E5%BE%84/","summary":"\u003cp\u003e配置Jupyter Notebook默认工作路径\u003c/p\u003e","title":"配置Jupyter Notebook默认工作路径"},{"content":"./\u0026mdash; title: \u0026ldquo;使用requirements文件快速安装/导出开发环境\u0026rdquo;\nauthor: tags:\nPython date: \u0026lsquo;2022-04-16\u0026rsquo; ShowToc: true draft: false 通过 requirements.txt 文件快速安装和导出python环境的方法\n前置知识 pip基本使用方法 1 安装 在工作目录下控制台输入\npip install -r requirements.txt 2 导出 要导出 requirement.txt 依赖文件, 最好借助 pipreqs\n在需要导出的目录下控制台输入\npip install pipreqs # 安装pipreqs pipreqs ./ 问题补充 报错 'gbk' codec can't decode byte 0xb0 in position 772: illegal multibyte sequence 换成 pipreqs ./ --encoding=utf8 参考 无\n","permalink":"https://dynais.github.io/code/posts/code.python.%E4%BD%BF%E7%94%A8requirements%E6%96%87%E4%BB%B6%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85%E5%AF%BC%E5%87%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","summary":"\u003cp\u003e./\u0026mdash;\ntitle: \u0026ldquo;使用requirements文件快速安装/导出开发环境\u0026rdquo;\u003c/p\u003e\n\u003ch1 id=\"author\"\u003eauthor:\u003c/h1\u003e\n\u003cp\u003etags:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePython\ndate: \u0026lsquo;2022-04-16\u0026rsquo;\nShowToc: true\ndraft: false\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003e通过 \u003ccode\u003erequirements.txt\u003c/code\u003e 文件快速安装和导出python环境的方法\u003c/p\u003e","title":""}]